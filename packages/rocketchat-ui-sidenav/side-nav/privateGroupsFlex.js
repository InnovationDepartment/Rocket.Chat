var createCookie;

Template.privateGroupsFlex.helpers({
  tRoomMembers: function() {
    return t('Members');
  },
  selectedUsers: function() {
    return Template.instance().selectedUsers.get();
  },
  name: function() {
    return Template.instance().selectedUserNames[this.valueOf()];
  },
  brand: function() {
    console.log("-----------");
    console.log(Template.instance().selectedUserNames);
    console.log(this.valueOf());
    console.log("-----------");
    return 'test DojoMojo';
  },
  autocompleteSettings: function() {
    return {
      limit: 10,
      rules: [
        {
          collection: 'brands',
          subscription: 'brandAutocomplete',
          field: 'name',
          template: Template.brandSearch,
          noMatchTemplate: Template.brandSearchEmpty,
          matchAll: true,
          selector: function(match) {
            return {
              name: match
            };
          },
          sort: 'name'
        }
      ]
    };
  }
});

createCookie = function(name, value, days) {
  var expires;
  var date, expires;
  if (days) {
    date = new Date;
    date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
    expires = '; expires=' + date.toGMTString();
  } else {
    expires = '';
  }
  document.cookie = name + '=' + value + expires + '; path=/';
};

Template.privateGroupsFlex.events({
  'autocompleteselect #pvt-group-members': function(event, instance, doc) {
    instance.selectedUsers.set(instance.selectedUsers.get().concat(doc.username));
    instance.selectedUserNames[doc.username] = doc.name;
    event.currentTarget.value = '';
    return event.currentTarget.focus();
  },
  'click .remove-room-member': function(e, instance) {
    var self, users;
    self = this;
    users = Template.instance().selectedUsers.get();
    users = _.reject(Template.instance().selectedUsers.get(), function(_id) {
      return _id === self.valueOf();
    });
    Template.instance().selectedUsers.set(users);
    return $('#pvt-group-members').focus();
  },
  'click .cancel-pvt-group': function(e, instance) {
    return SideNav.closeFlex(function() {
      return instance.clearForm();
    });
  },
  'click header': function(e, instance) {
    return SideNav.closeFlex(function() {
      return instance.clearForm();
    });
  },
  'mouseenter header': function() {
    return SideNav.overArrow();
  },
  'mouseleave header': function() {
    return SideNav.leaveArrow();
  },
  'keydown input[type="text"]': function(e, instance) {
    var data, xhr;
    data = '{\n    "size": 200,\n    "query": {\n        "wildcard": {\n            "accountname":  "*wel*"\n        }\n    }                   \n}\n';
    xhr = new XMLHttpRequest;
    xhr.withCredentials = true;
    xhr.addEventListener('readystatechange', function() {});
    if (this.readyState === 4) {
      console.log(this.responseText);
      return;
    }
    xhr.open('POST', 'http://localhost:5000/search/');
    xhr.setRequestHeader('x-requested-with', 'XMLHttpRequest');
    xhr.setRequestHeader('accept', '*/*');
    xhr.setRequestHeader('accept-language', 'en-US,en;q=0.8');
    xhr.setRequestHeader('authtoken', 'eaou');
    xhr.setRequestHeader('content', 'application/json');
    return xhr.send(data);
  }
});

Template.privateGroupsFlex.onCreated(function() {
  var instance;
  instance = this;
  instance.selectedUsers = new ReactiveVar([]);
  instance.selectedUserNames = {};
  instance.error = new ReactiveVar([]);
  return instance.clearForm = function() {
    instance.error.set([]);
    instance.groupName.set('');
    instance.selectedUsers.set([]);
    nstance.find('#pvt-group-name').value = '';
    return instance.find('#pvt-group-members').value = '';
  };
});

// ---
// generated by coffee-script 1.9.2